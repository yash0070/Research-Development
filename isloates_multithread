/* 
Isolates 
we use the isolates for perform the multithreads 
An isolate in Flutter is a higher-level abstraction built on top of threads, similar to an event loop, but with some key differences:

Each isolate has its own memory space.
Isolates cannot share mutable values with other isolates.
Data transmitted between isolates is duplicated.
*/



import 'dart:isolate';

import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Flutter Demo Home Page'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});
  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  int _incrementCounter(int iteration) {
    int value = 0;
    for(int i=-0; i<iteration; i++)
      value++;
    print(value);
    _counter = value;
    return value;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            CircularProgressIndicator(),
          ],
        ),
      ),
      floatingActionButton: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Padding(
            padding: const EdgeInsets.all(50.0),
            child: FloatingActionButton(
              onPressed: (){
                /// With Isolotes
                /// Like when i try with isolates with heavy loads nothing effect
                isolatesFunctions();
              },
              backgroundColor: Colors.blue,
              tooltip: 'Increment',
              child: const Icon(Icons.add),
            ),
          ),
          FloatingActionButton(
            onPressed: (){
              /// Without Isloates
              /// Like when i try to gave the heavy loads or like multiple calls
              /// so my screen or ui is hand bcz the function the running
              /// and it will hang up untill function calls completely
              _incrementCounter(400000000);
            },
            tooltip: 'Increment',
            child: const Icon(Icons.add),
          ),
        ],
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}

isolatesFunctions() async {
  /// Create instance
  /// first declare the receive port
  /// we use this for get the messages that is coming from the isolates events
  ReceivePort receivePort = ReceivePort();

  try {
    /// Call the Isolates Spawn function we need to send to parameters
    /// Call the function and their parameters
    await Isolate.spawn(runTask, [receivePort.sendPort, 400000000]);
  } catch (e) {

    /// for close the isolates
    receivePort.close();
  }
  /// calculate the function from the receive port
  final res = await receivePort.first;
  print(res);
}


/// This function is perform the actual task
int runTask(List<dynamic> args) {
  /// We use this for the sent the data back to the main function
  /// it will help us to communicate with the isolates with the help of the receiver port
  /// 
  SendPort resultPort = args[0];

  int value = 0;
  for(int i=-0; i<args[1]; i++)
    value++;

  Isolate.exit(resultPort,value);
}
